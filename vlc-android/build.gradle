import com.android.build.OutputFile

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/armeabi/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "2g"
        preDexLibraries true
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    flavorDimensions "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    task luaPlaylistCopy(type: Copy) {
        from '../vlc/share/lua/playlist'
        into 'assets/lua/playlist'
        exclude '**/*.txt'
    }

    task luaMetaCopy(type: Copy) {
        from '../vlc/share/lua/meta'
        into 'assets/lua/meta'
        exclude '**/*.txt'
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "org.videolan.vlc"

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        vectorDrawables.useSupportLibrary = true

        tasks.whenTaskAdded { task ->
            if (task.name.startsWith('merge')) {
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/assets/schemas".toString()]
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

    signingConfigs {
        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */
            if (project.hasProperty('keyStoreFile')) {
                storeFile file(project.findProperty('keyStoreFile'))
                keyAlias project.findProperty('storealias')
                if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                    storePassword = System.getenv('PASSWORD_KEYSTORE')
                    keyPassword = System.getenv('PASSWORD_KEYSTORE')
                } else {
                    storePassword project.findProperty('storepwd')
                    keyPassword project.findProperty('storepwd')
                }
            }
        }
    }

    buildTypes {
        release {
            signingConfig null
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
            kotlinOptions.freeCompilerArgs = [ '-Xno-param-assertions']
        }
        signedRelease {
            initWith release
            signingConfig = signingConfigs.release
            matchingFallbacks = ['release']
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
            multiDexEnabled true
        }
        dev {
            initWith debug
            matchingFallbacks = ['debug']
        }
    }

    splits {
        abi {
            def isReleaseBuild = false
            gradle.startParameter.taskNames.find {
                // Enable split for release builds in different build flavors
                // (assemblePaidRelease, assembleFreeRelease, etc.).
                if (it.toLowerCase() ==~ /assemble.*Release/.toLowerCase()) {
                    isReleaseBuild = true
                    return true // break
                }
                return false // continue
            }
            enable isReleaseBuild
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
//            universalApk !isReleaseBuild
        }
    }

    def abiCodes = ['x86':5, 'x86_64':8, 'armeabi-v7a':4, 'arm64-v8a':7]
    // make per-variant version code
    applicationVariants.all { variant ->
        //Custom APK name and versionCode
        variant.outputs.each { output ->
            def abiName = output.getFilter(OutputFile.ABI) ?: System.getenv('GRADLE_ABI')?.toLowerCase() ?: "all"
            output.versionCodeOverride = 10000000 + defaultConfig.versionCode + abiCodes.get(abiName, 0)
            def outputName = "VLC-Android-"
            outputName += variant.versionName + "-" + abiName + ".apk"
            output.outputFileName = outputName
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.release {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }
    sourceSets.signedRelease {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }
    sourceSets.debug {
        res.srcDirs = ['flavors/debug/res']
    }
    sourceSets.dev {
        res.srcDirs = ['flavors/debug/res']
    }
    sourceSets.test {
        java.srcDirs = ['test', 'test-common']
    }
    sourceSets.androidTest {
        java.srcDirs = ['androidTest', 'test-common']
        assets.srcDirs += files("$projectDir/assets/schemas".toString())
    }
}

task generateSources (type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task buildTranslationArray {
    doLast {
        def foundLocales = new StringBuilder()
        foundLocales.append("new String[]{")

        fileTree("res").visit { FileVisitDetails details ->
            println 'details: '+details
            if(details.file.path.endsWith("strings.xml")){
                def languageCode = details.file.parentFile.name.replaceAll('values-','').replaceAll('-r','-')
                languageCode = (languageCode == "values") ? "en" : languageCode;
                foundLocales.append("\"").append(languageCode).append("\"").append(",")
            }
        }

        foundLocales.append("}")
        //Don't forget to remove the trailing comma
        def foundLocalesString = foundLocales.toString().replaceAll(',}','}')
        android.defaultConfig.buildConfigField "String[]", "TRANSLATION_ARRAY", foundLocalesString
    }
}
preBuild.dependsOn buildTranslationArray

dependencies {
    devImplementation project(':libvlc')
    devImplementation project(':medialibrary')
    debugImplementation "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    debugImplementation "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"
    releaseImplementation "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    releaseImplementation "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"
    signedReleaseImplementation "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
    signedReleaseImplementation "org.videolan.android:medialibrary-all:$rootProject.ext.medialibraryVersion"
    implementation project(':api')
    implementation project(':tools')

    // AppCompat
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.androidxVersion"
    implementation "com.google.android.material:material:$rootProject.ext.androidxVersion"
    implementation "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"
    implementation "androidx.preference:preference:$androidxPreferencesVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    implementation 'androidx.multidex:multidex:2.0.1'

    //TV
    implementation "androidx.leanback:leanback:$rootProject.ext.androidxVersion"
    implementation "androidx.leanback:leanback-preference:$rootProject.ext.androidxVersion"
    implementation "androidx.tvprovider:tvprovider:$rootProject.ext.androidxVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlinx_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.archVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.ext.archVersion"
    implementation "androidx.room:room-runtime:$rootProject.ext.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.ext.roomVersion"
    implementation "androidx.paging:paging-runtime-ktx:$rootProject.ext.pagingVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.ext.retrofit"

    // Test
    testImplementation project(":medialibrary")
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.ext.roomVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.supportTest"
    androidTestUtil "androidx.test:orchestrator:$rootProject.ext.supportTest"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockito"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMock"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMock"
    androidTestImplementation 'androidx.test:rules:1.3.0-alpha01'
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

static def hostName() {
    return "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}


kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
}

